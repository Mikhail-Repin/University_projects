#pragma once

class CDot
{
	double fst, scnd;
	public:
                CDot() {fst=0; scnd=0;}
		CDot(double fst, double scnd) {this->fst=fst; this->scnd=scnd;}
		double Fst()const{return fst;}
		double Scnd()const{return scnd;}
                CDot& operator= (const CDot &a){fst = a.Fst();  scnd = a.Scnd(); return *this;}
                CDot(const CDot &a){*this = a;}
                void print() const {printf("(%lg ; %lg)\n", fst, scnd);}
};

template<class T> class CList2Node{public: T v; CList2Node<T> *prev, *next; CList2Node() {prev = next = NULL;} };

template<class T> class CList2
{
 CList2Node<T> *cur, *begin, *end;
 public:
	CList2() {SetZero();}
	void SetZero() {cur=begin=NULL;}
	~CList2() {Clean();}
	void Clean() {GoToBegin(); while(!DelCur()); SetZero();}
        CList2(const CList2 &b) {CopyOnly(b);}
        void CopyOnly (const CList2 &b) {T x; if(!b.IsEmpty()){b.GoToBegin(); do {b.GetCur(x); GoToEnd(); AddAfter(x);} while(!b.GoToNext());}}
        void GoToBegin() {cur=begin;}
        void GoToEnd() {cur=end;}
        int GoToNext() {if(IsEmpty()) return -1; if(cur->next==NULL) return -2; cur = cur->next; return 0;}
	int GoToPrev() {if(IsEmpty()) return -1; if(cur->prev==NULL) return -2; cur = cur->prev; return 0;}
        int GetCur(T &x) {if(IsEmpty()) return -1; x=cur->v; return 0;}
        int IsEmpty() {return cur==NULL;}
        void AddAfter (T &x);
        void AddBefore (T &x);
        int DelCur ();

};

class CComponent{public: CList2<CDot> frame; };

template<class T> void CList2<T>::AddAfter (T &x)
{
 CList2Node<T> *n = new CList2Node<T>(); n->v = x;
 if(IsEmpty()) {cur=begin=end=n;}
 else
 {
 	n->next=cur->next; n->prev=cur;
 	cur->next=n;
 	if(n->next)n->next->prev=n;  else end=n;
 }
}

template<class T> void CList2<T>::AddBefore (T &x)
{
 CList2Node<T> *n = new CList2Node<T>(); n->v = x;
 if(IsEmpty()) {cur=begin=end=n;}
 else
 {
 	n->prev=cur->prev; n->next=cur;
 	cur->prev=n;
 	if(n->prev)n->prev->next=n;  else begin=n;
 }
}

template<class T> int CList2<T>::DelCur ()
{
 if(IsEmpty()) return -1;
 if(cur->prev) cur->prev->next=cur->next; else begin=cur->next;
 if(cur->next) cur->next->prev=cur->prev; else end=cur->prev;
 if(cur->prev) cur=cur->prev; else cur=cur->next;
 return 0;
}
